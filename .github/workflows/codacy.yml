# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
#  schedule:
#    - cron: '43 3 * * 0'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Delete irrelevant files
        # Codacy looks at everything in the repo by default. We could configure
        # the step below via the --directory flag, but that only accepts a single
        # argument, and there are multiple dirs we want to scan (cli, drivers,
        # libsq, etc). A simple solution is to just delete the stuff we don't
        # want scanned.
        run: |
          rm -rf ./grammar/grun/java
          rm ./CHANGELOG.md

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647
          # configuration-file: .codacy.yml

      # Split SARIF file into individual files (one run per file)
      # GitHub requires each SARIF file to contain only one run per category
      - name: Split SARIF file
        id: split-sarif
        run: |
          python3 .github/scripts/split-sarif.py results.sarif ./sarif-split
          echo "Created split SARIF files:"
          ls -lh ./sarif-split/

      # Upload each SARIF file separately
      # Each file gets uploaded with a unique category based on the filename
      - name: Upload SARIF results files
        run: |
          # Find all SARIF files and upload them one by one
          for sarif_file in ./sarif-split/*.sarif; do
            if [ -f "$sarif_file" ]; then
              # Extract filename without path and extension to use as category
              filename=$(basename "$sarif_file" .sarif)
              category="codacy-${filename}"

              echo "Uploading $sarif_file with category: $category"

              # Use the upload-sarif action for each file
              # We need to do this in a subshell with the GitHub Action
              gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${{ github.repository }}/code-scanning/sarifs" \
                -f "commit_sha=${{ github.sha }}" \
                -f "ref=${{ github.ref }}" \
                -f "sarif=@$sarif_file" \
                -f "category=$category" \
                && echo "✓ Uploaded $filename" \
                || echo "✗ Failed to upload $filename"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
